

xml = 
[
  {
    "folder1": [
      {
        "folder2": [
          "file1",
          "file2"
        ]
      },
      {
        "folder3": [
          "file3",
          "file4"
        ]
      }
    ]
  },
  {
    "folder3": [
      "file5",
      "file6"
    ]
  }
]

bookmark = 
[
  {
    "title": "folder1",
    "content": [
      {
        "title": "folder2",
        "content": [
          "file1",
          "file2"
        ]
      },
      {
        "title": "folder3",
        "content": [
          "file3",
          "file4"
        ]
      }
    ]
  },
  {
    "title": "folder3",
    "content": [
      "file5",
      "file6"
    ]
  }
]


so we have our xml input, which is kind of weird this doc is just to try to
help you understand the tree traversal without having to worry about rust

essentially we are going to walk through the xml tree, and as we encounter new
nodes, we're going to add them to the bookmark tree

the part that gets rust specific is the references

do we create the Bookmark at the same level of the xmlNode before, during or after?

maybe as a first exercise, just do DFS, skip the unimportant nodes, and then print them
then we can find out what to do

okay we made some progress, we are able to traverse the node tree, but now we need to be able to
skip the extra text nodes under <DL> tags, and then get the H* tag out of the first child of the DL tag.
note that H* tags have no children.

cool we parsed the entire html file for bookmarks. we dodged non-closing tags
by just removing them, but that shouldn't be too much of a problem
next steps:
- [x] move the traverse function into parse.rs
- go through the hierarchy of bookmarks in the fuzzy finder somehow
- add functionality for Search bookmarks
- write some tests

so looks like our parsing was bugged, but it's fixed now, at least for most cases.
next we can look at serializing our bookmark format to save it to disk.
i have a feeling this import from a bookmarks.html file won't really even be used lol
but it was a good exercise I guess.

okay so next let's have some options for importing bookmarks, but write to a .ron file and save that in .local or something
can either do a subcommand, an optional arg like --import or whatever
