

xml = 
[
  {
    "folder1": [
      {
        "folder2": [
          "file1",
          "file2"
        ]
      },
      {
        "folder3": [
          "file3",
          "file4"
        ]
      }
    ]
  },
  {
    "folder3": [
      "file5",
      "file6"
    ]
  }
]

bookmark = 
[
  {
    "title": "folder1",
    "content": [
      {
        "title": "folder2",
        "content": [
          "file1",
          "file2"
        ]
      },
      {
        "title": "folder3",
        "content": [
          "file3",
          "file4"
        ]
      }
    ]
  },
  {
    "title": "folder3",
    "content": [
      "file5",
      "file6"
    ]
  }
]


so we have our xml input, which is kind of weird this doc is just to try to
help you understand the tree traversal without having to worry about rust

essentially we are going to walk through the xml tree, and as we encounter new
nodes, we're going to add them to the bookmark tree

the part that gets rust specific is the references

do we create the Bookmark at the same level of the xmlNode before, during or after?

maybe as a first exercise, just do DFS, skip the unimportant nodes, and then print them
then we can find out what to do

okay we made some progress, we are able to traverse the node tree, but now we need to be able to
skip the extra text nodes under <DL> tags, and then get the H* tag out of the first child of the DL tag.
note that H* tags have no children.

cool we parsed the entire html file for bookmarks. we dodged non-closing tags
by just removing them, but that shouldn't be too much of a problem
next steps:
- [x] move the traverse function into parse.rs
- go through the hierarchy of bookmarks in the fuzzy finder somehow
- add functionality for Search bookmarks
- write some tests

so looks like our parsing was bugged, but it's fixed now, at least for most cases.
next we can look at serializing our bookmark format to save it to disk.
i have a feeling this import from a bookmarks.html file won't really even be used lol
but it was a good exercise I guess.

okay so next let's have some options for importing bookmarks, but write to a .ron file and save that in .local or something
can either do a subcommand, an optional arg like --import or whatever

cool so we got the import subcommand working using clap, and we also configured wth to save to a data directory
next we could probably clean up some unwraps, or deal with empty wth files, or something
maybe just print a helpful message if wth is empty
also can maybe switch to a more hackable format
ron doesn't really seem writable, we could maybe just do yaml
or we can do lua lmao
or a DSL??

or are we going to keep everything as an interface in the command line?

i think we should probably just allow the user to edit the bookmark file
but let them know it might get overwritten by wth

let's create an "add bookmark" feature

also i thjink i realized we should have two different types, bookmarks, and bookmark folders

alright so i decided to write my own parser. read about lexers and parsers and
i think roughly it goes like, lexers convert the text into a list of tokens. so
in our case, the lexer will create a few tokens like the open tag token, the
attribute token, etc. then these tokens are just all listed in order. now the
parser goes through these tokens and turns them into an actual nested
structure, like our bookmarks.

for tags, I had these tokens:

- OpenTagStart, for example "<A", but the token just stores A
- AttributeKey, which is anything after OpenTagStart, but right before an =
- AttributeValue, which is anything after the = following AttributeKey
- OpenTagEnd, which is ">"
- ClosingTag,

but I forgot about self closing tags, and also the lexer I wrote for
OpenTagStart doesn't take into account that closing tags also start with <

so next time I have to consider those things and fix the lexer, and also write
the rest of the lexer for all other token types.
